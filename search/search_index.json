{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#what-is-eungabi","title":"What is Eungabi?","text":"<p>Eungabi is a Compose Multiplatform Navigation library which support Platform Native Features like Predictive Back Gesture(Android), Swipe-Back Gesture(iOS), Shared Element Transition(Common). This library adopts a screen transition pattern based on NavHost, similar to the Jetpack Navigation library. A key difference is that it allows for customization of the Predictive Back animation separately.\"</p>"},{"location":"#supported-targets","title":"Supported targets","text":"<ul> <li><code>android</code></li> <li><code>ios</code></li> <li><code>web</code> (<code>IR</code> and <code>Wasm</code>)</li> <li><code>desktop</code> (<code>jvm</code> and <code>macOS</code>)</li> </ul>"},{"location":"#license","title":"License","text":"<pre><code>Copyright 2024 easternkite\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#eungabi-core-module","title":"Eungabi Core Module","text":"<p>you can simply use main functionalities of <code>Eungabi</code> navigation. </p> GroovyKotlin <pre><code>implementation \"io.github.easternkite:eungabi:&lt;version&gt;\"\n</code></pre> <pre><code>implementation(\"io.github.easternkite:eungabi:&lt;version&gt;\")\n</code></pre>"},{"location":"getting-started/quick_start/","title":"Quick Start","text":"<p>This section describes how to quickly get started with <code>Eungabi</code>. </p>"},{"location":"getting-started/quick_start/#1-create-navigation-controller","title":"1. Create Navigation Controller.","text":"<p>The navigation Controller(<code>EunGabiController</code>) holds the navigation graph and provides methods that allow your app to move between the destinations you want by controlling backStack.</p> <p>To create a <code>EunGabiController</code> in composable function, call <code>rememberEunGabiController</code></p> <pre><code>val controller = rememberEunGabiController()\n</code></pre> <p>Warning</p> <p>you must use EunGabiController with EunGabiNavHost described next section by passing with parameter.</p> <p>There are two key methods you should know: <code>navigate</code>, <code>navigateUp</code> <code>navigate</code> allows you to navigate to the next screen by adding the provided route to the back stack. <code>navigateUp</code> allows you to navigate to the previous screen by removing a latest entry(or entries) from the back stack.</p>"},{"location":"getting-started/quick_start/#2-create-a-navigation-host-composable","title":"2. Create a Navigation Host Composable","text":"<p>The <code>EunGabiNavHost</code> creates a navigation graph and displays the current entry of the back stack. By using this, you can define and control your desired routes.</p> <p>you can simply call <code>EunGabiNavHost</code> in the composable function to create a navigation host. <pre><code>val controller = rememberEunGabiController()\nEunGabiNavHost(\n    modifier = Modifier,\n    controller = controller,\n    startDestination = \"routeA\",\n) {\n    composable(\"routeA\") {\n        MainComponent(\"routeA\") {\n            controller.navigate(\"routeB\")\n        }\n    }\n    composable(\"routeB\") {\n        DetailsComponent(\n            \"routeB\",\n            onNavigateBack = controller::navigateUp\n        ) {\n            egController.navigate(\"routeC\")\n        }\n    }\n    //...\n}\n</code></pre> 1. The call to the <code>EunGabiNavHost</code> composable passes a <code>EunGabiController</code> and a route for the start destination. 2. The lambda passed to the <code>EunGabiNavHost</code> creates <code>EunGabiGraph</code> and set the graph to the <code>EunGabiController.graph</code> 3. Each route is supplied as a <code>EunGabiDestination</code> by calling <code>EunGabiGraphBuilder.composable()</code> which adds the destination to the resulting <code>EunGabiGraph</code> described at 2. 4. The lambda passed to <code>composable</code> is what the <code>EunGabiNavHost</code> displays for that destination.</p>"},{"location":"navigation/passing_arguments/","title":"Passing Arguments","text":""},{"location":"navigation/passing_arguments/#passing-arguments_1","title":"Passing Arguments","text":"<p>you can simply pass arguments by adding query parameter when calling <code>navigate</code> function. For example : <pre><code>controller.navigate(\"ScreenA?id=111\")\n</code></pre></p> <p>Then, you can access the passed arguments within a composable function defined in <code>EungabiGraphBuilder</code>. For example : <pre><code>fun EunGabiGraphBuilder.aScreenRoute() {\n    composable(\"ScreenA\") {\n        val id = it.arguments.getString(\"id\")\n        Screen(id = id)\n    }\n}\n</code></pre></p>"}]}